name: Pre-deploy
run-name: ${{ inputs.id }}

on:
  workflow_dispatch:
    inputs:
      id:
        description: 'Unique identifier for the deployment run'
        required: true
        type: string
      environment:
        description: 'Deployment environment'
        required: true
        default: DEV
        options:
          - DEV
          - SIT
          - UAT
          - PROD
        type: choice
      repos:
        description: 'List of repositories to deploy'
        required: true
        type: string

permissions:
  actions: write    # Required for triggering workflows
  contents: read    # Required for checking out code

jobs:
  repositories:
    runs-on: ubuntu-latest
    steps:
      - run: |
          info=$(echo '${{ inputs.repos }}' | jq -r '.[] | "\(.repo_name) \(.commit_hash)"')
          echo "::notice::$info"

  preprocess:
    runs-on: ubuntu-latest
    needs: repositories
    environment:
      name: ${{ inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Parse repos input
        id: parse
        run: |
          echo '${{ inputs.repos }}' | jq '.' > repos.json
          cat repos.json

      - name: Sort repos based on predefined order
        run: |
          # Define order map as an array
          order='["baz-backend", "foo-frontend", "bar-frontend"]'

          # Sort repos.json based on the index in order map
          jq --argjson order "$order" '
            sort_by(
              (.repo_name as $name |
              ($order | index($name)))
            )
          ' repos.json > sorted_repos.json

      - name: Trigger repository deployments sequentially
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          ENV: ${{ inputs.environment }}
          REGION: ${{ inputs.region }}
        run: |
          set -e

          # Matrix configuration for frontend deployments
          frontend_matrix='[
            {"repo_name": "foo-frontend", "app_name": "foo-frontend"},
            {"repo_name": "foo-frontend", "app_name": "bar-frontend"},
          ]'

          # Matrix configuration for backend deployments
          backend_matrix='[
            {"repo_name": "baz-backend", "app_name": "baz-backend"},
          ]'

          # Function to get matrix configuration for a repository
          get_matrix_config() {
            local repo_name="$1"
            local deployment_type="$2"
            
            if [ "$deployment_type" = "frontend" ]; then
              echo "$frontend_matrix" | jq -r ".[] | select(.\"repo_name\" == \"$repo_name\")"
            elif [ "$deployment_type" = "backend" ]; then
              echo "$backend_matrix" | jq -r ".[] | select(.\"repo_name\" == \"$repo_name\")"
            fi
          }

          # Function to determine deployment type
          determine_type() {
            local repo_name="$1"
            
            # Check if repo exists in frontend matrix
            frontend_match=$(echo "$frontend_matrix" | jq -r ".[] | select(.\"repo_name\" == \"$repo_name\") | .\"repo_name\"")
            if [ -n "$frontend_match" ] && [ "$frontend_match" != "null" ]; then
              echo "frontend"
              return
            fi
            
            # Check if repo exists in backend matrix
            backend_match=$(echo "$backend_matrix" | jq -r ".[] | select(.\"repo_name\" == \"$repo_name\") | .\"repo_name\"")
            if [ -n "$backend_match" ] && [ "$backend_match" != "null" ]; then
              echo "backend"
              return
            fi
            
            echo "Error: Unknown repository name: $repo_name" >&2
            exit 1
          }

          repos=$(cat sorted_repos.json)
          echo "$repos" | jq -c '.[]' | while read repo; do
            repo_name=$(echo "$repo" | jq -r '.repo_name')
            commit=$(echo "$repo" | jq -r '.commit_hash')
            deployment_type=$(determine_type "$repo_name")
            repo_deploy_id="${{ inputs.id }}_$repo_name"

            echo "Triggering $ENV deployment for $repo_name..."

            # Get matrix configuration for the repository
            matrix_config=$(get_matrix_config "$repo_name" "$deployment_type")

            # Extract values from matrix configuration
            if [ -n "$matrix_config" ] && [ "$matrix_config" != "null" ]; then
              app_name=$(echo "$matrix_config" | jq -r '.["app_name"]')
            else
              echo "Error: No matrix configuration found for $repo_name" >&2
              exit 1
            fi

            # Trigger appropriate deployment workflow based on type
            curl -s -X POST \
              -H "Authorization: Bearer $GH_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/$GITHUB_REPOSITORY/actions/workflows/deploy.yml/dispatches" \
              -d "{
                \"ref\": \"$(git branch --show-current)\",
                \"inputs\": {
                  \"id\": \"$repo_deploy_id\",
                  \"repo_name\": \"$repo_name\",
                  \"app_name\": \"$app_name\",
                  \"commit_hash\": \"$commit\",
                  \"environment\": \"$ENV\",
                  \"deployment_type\": \"$deployment_type\",
                }
              }"

            # Pause to ensure workflow is registered
            sleep 10

            # Get workflow ID for the specific workflow
            current_date=$(date -u +"%Y-%m-%d")         
            run_id=$(curl -s \
                -H "Authorization: Bearer $GH_TOKEN" \
                -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/repos/$GITHUB_REPOSITORY/actions/runs?created=%3E%3D${current_date}&event=workflow_dispatch" \
                | jq -r ".workflow_runs[] | select(.name==\"$repo_deploy_id\") | .id")

            # Throw an error if run_id is undefined or empty
            if [ -z "$run_id" ] || [ "$run_id" = "null" ]; then
              echo "‚ùå Error: Failed to get run ID for $name deployment. The workflow may not have started properly." >&2
              exit 1
            fi

            echo "Deployment triggered for $name with run ID: $run_id"
            
            # Wait for workflow completion and check status
            while true; do
              run_info=$(curl -s \
                -H "Authorization: Bearer $GH_TOKEN" \
                -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/repos/$GITHUB_REPOSITORY/actions/runs/$run_id")
              
              status=$(echo "$run_info" | jq -r '.status')
              conclusion=$(echo "$run_info" | jq -r '.conclusion')
              
              if [ "$status" = "completed" ]; then
                if [ "$conclusion" = "success" ]; then
                  echo "‚úÖ Deployment for $name completed successfully!"
                  break
                else
                  echo "‚ùå Deployment for $name failed with status: $conclusion"
                  exit 1
                fi
              fi
              
              echo "‚è≥ Waiting for $name deployment to complete... Current status: $status"
              sleep 10
            done
          done
          
          echo "üéâ All deployments completed successfully!"
